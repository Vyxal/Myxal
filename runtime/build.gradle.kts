/*
 * This file was generated by the Gradle 'init' task.
 */

import java.io.FileInputStream
import java.nio.file.Files
import java.util.jar.JarInputStream
import java.nio.file.Path as JPath

plugins {
    id("io.github.seggan.myxal.kotlin-library-conventions")
}

val runtimeLib: Configuration by configurations.creating {
    extendsFrom(configurations.getByName("api"))
}

dependencies {
    runtimeLib("org.jetbrains.kotlin:kotlin-stdlib:1.6.21") {
        isTransitive = false
    }
    runtimeLib("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21") {
        isTransitive = false
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21")
    runtimeLib("org.jetbrains:annotations:23.0.0") {
        isTransitive = false
    }
    implementation("org.jetbrains:annotations:23.0.0")
}

val dest: JPath = JPath.of("$buildDir/runtimeLibs")

tasks.register("extractLibs") {
    doLast {
        val list = dest.resolve("runtime.list")
        if (!Files.exists(list)) {
            Files.createDirectories(dest)
            Files.createFile(list)
        }
        val classes = HashSet(Files.readAllLines(list))
        for (f in runtimeLib.resolve()) {
            JarInputStream(FileInputStream(f)).use {
                var entry = it.nextJarEntry
                while (entry != null) {
                    if (!entry.isDirectory && entry.name.endsWith(".class")) {
                        val d = dest.resolve(entry.name)
                        if (!Files.exists(d)) {
                            Files.createDirectories(d.parent)
                            Files.copy(it, d)
                        }
                        classes.add(entry.name)
                    }
                    entry = it.nextJarEntry
                }
            }
        }
        Files.write(list, classes)
    }
}